const TelegramBot = require("node-telegram-bot-api");
const User = require("../models/User");
require("dotenv").config();

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!TELEGRAM_BOT_TOKEN) {
    console.error("‚ùå TELEGRAM_BOT_TOKEN n'est pas d√©fini.");
    process.exit(1);
}

console.log("‚úÖ TELEGRAM_BOT_TOKEN r√©cup√©r√© avec succ√®s : ", TELEGRAM_BOT_TOKEN);

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

console.log("‚úÖ Bot d√©marr√© avec succ√®s.");

// Commande /start pour inscrire l'utilisateur
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.chat.username || "Utilisateur inconnu";

    console.log(`/start command received from ${username} (${chatId})`);

    try {
        const existingUser = await User.findOne({ chatId });
        console.log(`Recherche d'utilisateur existant : ${existingUser}`);

        if (!existingUser) {
            await User.create({ chatId, username });
            console.log(`Utilisateur cr√©√© : ${username} (${chatId})`);
            bot.sendMessage(chatId, "‚úÖ Inscription r√©ussie ! Vous recevrez les alertes.");
        } else {
            console.log(`Utilisateur d√©j√† inscrit : ${username} (${chatId})`);
            bot.sendMessage(chatId, "üîî Vous √™tes d√©j√† inscrit.");
        }
    } catch (error) {
        console.error("‚ùå Erreur d'inscription :", error);
        bot.sendMessage(chatId, "‚ö†Ô∏è Une erreur s'est produite.");
    }
});

// Commande /stop pour se d√©sinscrire
bot.onText(/\/stop/, async (msg) => {
    const chatId = msg.chat.id;

    console.log(`/stop command received from ${chatId}`);

    try {
        await User.deleteOne({ chatId });
        console.log(`Utilisateur d√©sinscrit : ${chatId}`);
        bot.sendMessage(chatId, "‚ùå D√©sinscription r√©ussie. Vous ne recevrez plus d'alertes.");
    } catch (error) {
        console.error("‚ùå Erreur de d√©sinscription :", error);
        bot.sendMessage(chatId, "‚ö†Ô∏è Une erreur s'est produite.");
    }
});

// Commande /ignore pour ignorer les alertes pour un compte ou une communaut√© sp√©cifique
bot.onText(/\/ignore (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const accountOrCommunity = match[1];

    console.log(`/ignore command received from ${chatId} for ${accountOrCommunity}`);

    try {
        const user = await User.findOne({ chatId });
        if (user) {
            user.ignoredAccounts.push(accountOrCommunity);
            await user.save();
            console.log(`Compte ou communaut√© ignor√© ajout√© pour ${chatId} : ${accountOrCommunity}`);
            bot.sendMessage(chatId, `üîï Vous ne recevrez plus d'alertes pour ${accountOrCommunity}.`);
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de l'ignorance de l'alerte :", error);
        bot.sendMessage(chatId, "‚ö†Ô∏è Une erreur s'est produite.");
    }
});

// Commande /ignore communities pour ignorer toutes les communaut√©s
bot.onText(/\/ignore_communities/, async (msg) => {
    const chatId = msg.chat.id;

    console.log(`/ignore_communities command received from ${chatId}`);

    try {
        const user = await User.findOne({ chatId });
        if (user) {
            user.ignoredAccounts.push("communities");
            await user.save();
            console.log(`Toutes les communaut√©s ignor√©es pour ${chatId}`);
            bot.sendMessage(chatId, "üîï Vous ne recevrez plus d'alertes pour toutes les communaut√©s.");
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de l'ignorance des communaut√©s :", error);
        bot.sendMessage(chatId, "‚ö†Ô∏è Une erreur s'est produite.");
    }
});

// Commande /unignore pour ne plus ignorer les alertes pour un compte ou une communaut√© sp√©cifique
bot.onText(/\/unignore (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const accountOrCommunity = match[1];

    console.log(`/unignore command received from ${chatId} for ${accountOrCommunity}`);

    try {
        const user = await User.findOne({ chatId });
        if (user) {
            user.ignoredAccounts = user.ignoredAccounts.filter(acc => acc !== accountOrCommunity);
            await user.save();
            console.log(`Compte ou communaut√© ignor√© retir√© pour ${chatId} : ${accountOrCommunity}`);
            bot.sendMessage(chatId, `üîî Vous recevrez √† nouveau des alertes pour ${accountOrCommunity}.`);
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression de l'ignorance de l'alerte :", error);
        bot.sendMessage(chatId, "‚ö†Ô∏è Une erreur s'est produite.");
    }
});

// Commande /setthreshold pour d√©finir le seuil de doublons
bot.onText(/\/setthreshold (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const threshold = parseInt(match[1], 10);

    console.log(`/setthreshold command received from ${chatId} with threshold ${threshold}`);

    try {
        const user = await User.findOne({ chatId });
        if (user) {
            console.log(`User found: ${user.username} (${user.chatId})`);
            user.duplicateThreshold = threshold;
            await user.save();
            console.log(`Seuil de doublons mis √† jour pour ${chatId} : ${threshold}`);
            bot.sendMessage(chatId, `üî¢ Seuil de doublons mis √† jour √† ${threshold}.`);
        } else {
            console.log(`User not found: ${chatId}`);
            bot.sendMessage(chatId, "‚ö†Ô∏è Utilisateur non trouv√©.");
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour du seuil de doublons :", error);
        bot.sendMessage(chatId, "‚ö†Ô∏è Une erreur s'est produite.");
    }
});

// Fonction pour envoyer une alerte √† tous les utilisateurs
const sendTelegramAlertToUsers = async (message, telegram, twitter) => {
    console.log(`Envoi d'une alerte : ${message}`);

    try {
        const users = await User.find();
        for (const user of users) {
            // V√©rifier si l'utilisateur a ignor√© ce compte, les statuts ou les communaut√©s
            if (user.ignoredAccounts.includes(telegram) || user.ignoredAccounts.includes(twitter) || user.ignoredAccounts.includes("status") || user.ignoredAccounts.includes("communities") || user.ignoredAccounts.some(acc => message.includes(acc))) {
                continue;
            }

            console.log(`Envoi d'une alerte √† ${user.chatId}`);
            const response = await bot.sendMessage(user.chatId, `üö® ALERTE : ${message}\n\nPour ignorer les alertes pour ce compte ou cette communaut√©, utilisez la commande /ignore <compte ou communaut√©>`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: `Ignorer ${telegram}`, callback_data: `ignore_${telegram}` }],
                        [{ text: `Ignorer ${twitter}`, callback_data: `ignore_${twitter}` }],
                        [{ text: `Ignorer les statuts`, callback_data: `ignore_status` }],
                        [{ text: `Ignorer les communaut√©s`, callback_data: `ignore_communities` }]
                    ]
                }
            });
            console.log(`R√©ponse de Telegram : ${JSON.stringify(response)}`);
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de l'envoi de l'alerte :", error);
    }
};

// Gestion des callbacks pour les boutons d'ignorance
bot.on("callback_query", async (callbackQuery) => {
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const data = callbackQuery.data;

    const accountToIgnore = data.split("_")[1];

    try {
        const user = await User.findOne({ chatId });
        if (user) {
            if (data.startsWith("ignore_")) {
                user.ignoredAccounts.push(accountToIgnore);
                await user.save();
                bot.sendMessage(chatId, `üîï Vous ne recevrez plus d'alertes pour ${accountToIgnore}.`);
            }
        }
    } catch (error) {
        console.error("‚ùå Erreur lors de l'ignorance de l'alerte :", error);
        bot.sendMessage(chatId, "‚ö†Ô∏è Une erreur s'est produite.");
    }
});

module.exports = { bot, sendTelegramAlertToUsers };